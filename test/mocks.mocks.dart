// Mocks generated by Mockito 5.0.16 from annotations
// in flutter_seat_geek/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_seat_geek/api/entities/common.dart' as _i2;
import 'package:flutter_seat_geek/api/entities/event.dart' as _i6;
import 'package:flutter_seat_geek/core/error/failures.dart' as _i3;
import 'package:flutter_seat_geek/core/event_bus.dart' as _i7;
import 'package:flutter_seat_geek/services/seat_geek/seat_geek_service.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponseEntity_0<T> extends _i1.Fake
    implements _i2.ResponseEntity<T> {}

class _FakeErrorResult_1 extends _i1.Fake implements _i3.ErrorResult {}

/// A class which mocks [SeatGeekService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeatGeekService extends _i1.Mock implements _i4.SeatGeekService {
  MockSeatGeekService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ResponseEntity<_i6.EventList?>> events({String? query}) =>
      (super.noSuchMethod(Invocation.method(#events, [], {#query: query}),
              returnValue: Future<_i2.ResponseEntity<_i6.EventList?>>.value(
                  _FakeResponseEntity_0<_i6.EventList?>()))
          as _i5.Future<_i2.ResponseEntity<_i6.EventList?>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CustomErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomErrorHandler extends _i1.Mock
    implements _i3.CustomErrorHandler {
  MockCustomErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ErrorResult getErrorMessage(dynamic exception) =>
      (super.noSuchMethod(Invocation.method(#getErrorMessage, [exception]),
          returnValue: _FakeErrorResult_1()) as _i3.ErrorResult);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBus extends _i1.Mock implements _i7.EventBus {
  MockEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i7.BusEvent> get events => (super.noSuchMethod(
      Invocation.getter(#events),
      returnValue: Stream<_i7.BusEvent>.empty()) as _i5.Stream<_i7.BusEvent>);
  @override
  void sendEvent(_i7.BusEvent? event) =>
      super.noSuchMethod(Invocation.method(#sendEvent, [event]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EventBusImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBusImpl extends _i1.Mock implements _i7.EventBusImpl {
  MockEventBusImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i7.BusEvent> get events => (super.noSuchMethod(
      Invocation.getter(#events),
      returnValue: Stream<_i7.BusEvent>.empty()) as _i5.Stream<_i7.BusEvent>);
  @override
  void sendEvent(_i7.BusEvent? event) =>
      super.noSuchMethod(Invocation.method(#sendEvent, [event]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
